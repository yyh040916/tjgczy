/*2351495 大数据 闫业豪*/

/* 函数实现部分，{ }内的东西可以任意调整，目前的return 0只是一个示例，可改变 */

/* 不允许定义任何形式的外部全局、静态全局、宏定义、只读变量 */

/***************************************************************************
  函数名称：
  功    能：求字符串str的长度
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlen(const char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int len = 0;
    while (str[len] != '\0')
        len++;
    return len; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2追加到s1后面，含\0
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcat(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, j = 0;
    while (s1[i] != '\0')
        i++;
    while (s2[j] != '\0')
    {
        s1[i] = s2[j];
        i++;
        j++;
    }
    s1[i] = '\0';
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2的前len个字符追加到s1后面，并添加\0
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncat(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, j = 0, count = 0;
    while (s1[i] != '\0')
        i++;
    while (s2[j] != '\0' && count < len)
    {
        s1[i] = s2[j];
        i++;
        j++;
        count++;
    }
    s1[i] = '\0';
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2复制到s1中，覆盖原内容，复制时包含\0
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcpy(char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (s2[i] != '\0')
    {
        s1[i] = s2[i];
        i++;
    }
    s1[i] = '\0';
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串s2的前len个字符复制到s1中，复制时不含\0
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncpy(char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (s2[i] != '\0' && i < len)
    {
        s1[i] = s2[i];
        i++;
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的大小，英文字母区分大小写
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcmp(const char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (s1[i] != '\0' && s2[i] != '\0')
    {
        if (s1[i] != s2[i])
            return s1[i] - s2[i];
        i++;
    }
    return s1[i] - s2[i]; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的大小，英文字母不分大小写
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasecmp(const char s1[], const char s2[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    char c1, c2;
    while (s1[i] != '\0' && s2[i] != '\0')
    {
        c1 = s1[i];
        c2 = s2[i];
        if (c1 >= 'A' && c1 <= 'Z')
            c1 = c1 - 'A' + 'a';
        if (c2 >= 'A' && c2 <= 'Z')
            c2 = c2 - 'A' + 'a';
        if (c1 != c2)
            return c1 - c2;
        i++;
    }
    //长度不同时
    c1 = s1[i];
    c2 = s2[i];
    if (c1 >= 'A' && c1 <= 'Z')
        c1 = c1 - 'A' + 'a';
    if (c2 >= 'A' && c2 <= 'Z')
        c2 = c2 - 'A' + 'a';
    return c1-c2; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的前len个字符的大小，英文字母区分大小写
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strncmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (i < len && s1[i] != '\0' && s2[i] != '\0')
    {
        if (s1[i] != s2[i])
            return s1[i] - s2[i];
        i++;
    }
    if (i == len)
        return 0;
    return s1[i] - s2[i]; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：比较字符串s1和s2的前len个字符的大小，英文字母不分大小写
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strcasencmp(const char s1[], const char s2[], const int len)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    char c1, c2;
    while (i < len && s1[i] != '\0' && s2[i] != '\0')
    {
        c1 = s1[i];
        c2 = s2[i];
        if (c1 >= 'A' && c1 <= 'Z')
            c1 = c1 - 'A' + 'a';
        if (c2 >= 'A' && c2 <= 'Z')
            c2 = c2 - 'A' + 'a';
        if (c1 != c2)
            return c1 - c2;
        i++;
    }
    if (i == len)
        return 0;
    c1 = s1[i];
    c2 = s2[i];
    if (c1 >= 'A' && c1 <= 'Z')
        c1 = c1 - 'A' + 'a';
    if (c2 >= 'A' && c2 <= 'Z')
        c2 = c2 - 'A' + 'a';
    return c1 - c2; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串str中所有小写字母均转为大写，其它字符不变，转换后放在原串中
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strupr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (str[i] != '\0')
    {
        if (str[i] >= 'a' && str[i] <= 'z')
            str[i] = str[i] - 'a' + 'A';
        i++;
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：将字符串str中所有大写字母均转为小写，其它字符不变，转换后放在原串中
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strlwr(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (str[i] != '\0')
    {
        if (str[i] >= 'A' && str[i] <= 'Z')
            str[i] = str[i] - 'A' + 'a';
        i++;
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：在字符串str中寻找字符ch第一次出现的位置，顺序是从左到右
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strchr(const char str[], char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0;
    while (str[i] != '\0')
    {
        if (str[i] == ch)
            return i + 1;
        i++;
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：在字符串str中寻找字符串substr第一次出现的位置，顺序是从左到右
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, j, k;
    if (substr[0] == '\0')
        return 1;
    while (str[i] != '\0')
    {
        j = 0;
        k = i;
        while (substr[j] != '\0' && str[k] != '\0' && substr[j] == str[k])
        {
            j++;
            k++;
        }
        if (substr[j] == '\0')
            return i + 1;
        i++;
    }
    return 0; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：在字符串str中寻找字符ch最后一次出现的位置，顺序是从右到左
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrchr(const char str[], const char ch)
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, pos = 0;
    while (str[i] != '\0')
    {
        if (str[i] == ch)
            pos = i + 1;
        i++;
    }
    return pos;//return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：在字符串str中寻找字符串substr最后一次出现的位置，顺序是从右到左
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrstr(const char str[], const char substr[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, j, k, pos = 0;
    if (substr[0] == '\0')
        return 1;
    while (str[i] != '\0')
    {
        j = 0;
        k = i;
        while (substr[j] != '\0' && str[k] != '\0' && substr[j] == str[k])
        {
            j++;
            k++;
        }
        if (substr[j] == '\0')
            pos = i + 1;
        i++;
    }
    return pos; //return值可根据需要修改
}

/***************************************************************************
  函数名称：
  功    能：字符串反转，放入原串中
  输入参数：
  返 回 值：
  说    明：
***************************************************************************/
int tj_strrev(char str[])
{
    /* 注意：函数内不允许定义任何形式的数组（包括静态数组） */
    int i = 0, j = 0;
    char temp;
    while (str[j] != '\0')
        j++;
    j--;
    while (i < j)
    {
        temp = str[i];
        str[i] = str[j];
        str[j] = temp;
        i++;
        j--;
    }
    return 0; //return值可根据需要修改
}

